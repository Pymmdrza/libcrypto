"""
Type stubs for Core._crypto_core C extension module.

This module provides core cryptographic functions implemented in C for performance.
"""

from typing import Optional, Union, Any

# Type aliases
BytesLike = Union[bytes, bytearray, memoryview]

# AES functions
def aes_encrypt(key: BytesLike, plaintext: BytesLike, mode: int = ...) -> bytes: ...
def aes_decrypt(key: BytesLike, ciphertext: BytesLike, mode: int = ...) -> bytes: ...

# SHA hash functions
def sha1_digest(data: BytesLike) -> bytes: ...
def sha224_digest(data: BytesLike) -> bytes: ...
def sha256_digest(data: BytesLike) -> bytes: ...
def sha384_digest(data: BytesLike) -> bytes: ...
def sha512_digest(data: BytesLike) -> bytes: ...

# RIPEMD hash functions
def ripemd160_digest(data: BytesLike) -> bytes: ...

# MD hash functions
def md2_digest(data: BytesLike) -> bytes: ...
def md4_digest(data: BytesLike) -> bytes: ...
def md5_digest(data: BytesLike) -> bytes: ...

# BLAKE2 hash functions
def blake2b_digest(data: BytesLike, digest_size: int = 64) -> bytes: ...
def blake2s_digest(data: BytesLike, digest_size: int = 32) -> bytes: ...

# Keccak hash functions
def keccak_digest(data: BytesLike, digest_size: int = 32) -> bytes: ...

# HMAC functions
def hmac_digest(key: BytesLike, data: BytesLike, hash_name: str) -> bytes: ...

# PBKDF2 functions
def pbkdf2_hmac(hash_name: str, password: BytesLike, salt: BytesLike, iterations: int, dklen: Optional[int] = None) -> bytes: ...

# Scrypt functions
def scrypt(password: BytesLike, salt: BytesLike, n: int, r: int, p: int, dklen: int) -> bytes: ...

# ChaCha20 functions
def chacha20_encrypt(key: BytesLike, nonce: BytesLike, plaintext: BytesLike, counter: int = 0) -> bytes: ...
def chacha20_decrypt(key: BytesLike, nonce: BytesLike, ciphertext: BytesLike, counter: int = 0) -> bytes: ...

# Salsa20 functions
def salsa20_encrypt(key: BytesLike, nonce: BytesLike, plaintext: BytesLike, counter: int = 0) -> bytes: ...
def salsa20_decrypt(key: BytesLike, nonce: BytesLike, ciphertext: BytesLike, counter: int = 0) -> bytes: ...

# Poly1305 functions
def poly1305_mac(key: BytesLike, data: BytesLike) -> bytes: ...

# ARC4 functions
def arc4_crypt(key: BytesLike, data: BytesLike) -> bytes: ...

# DES functions
def des_encrypt(key: BytesLike, plaintext: BytesLike) -> bytes: ...
def des_decrypt(key: BytesLike, ciphertext: BytesLike) -> bytes: ...
def des3_encrypt(key: BytesLike, plaintext: BytesLike) -> bytes: ...
def des3_decrypt(key: BytesLike, ciphertext: BytesLike) -> bytes: ...

# Blowfish functions
def blowfish_encrypt(key: BytesLike, plaintext: BytesLike) -> bytes: ...
def blowfish_decrypt(key: BytesLike, ciphertext: BytesLike) -> bytes: ...

# CAST functions
def cast_encrypt(key: BytesLike, plaintext: BytesLike) -> bytes: ...
def cast_decrypt(key: BytesLike, ciphertext: BytesLike) -> bytes: ...

# Block cipher mode functions
def cbc_encrypt(cipher_encrypt_func: Any, key: BytesLike, iv: BytesLike, plaintext: BytesLike) -> bytes: ...
def cbc_decrypt(cipher_decrypt_func: Any, key: BytesLike, iv: BytesLike, ciphertext: BytesLike) -> bytes: ...
def cfb_encrypt(cipher_encrypt_func: Any, key: BytesLike, iv: BytesLike, plaintext: BytesLike) -> bytes: ...
def cfb_decrypt(cipher_encrypt_func: Any, key: BytesLike, iv: BytesLike, ciphertext: BytesLike) -> bytes: ...
def ctr_crypt(cipher_encrypt_func: Any, key: BytesLike, nonce: BytesLike, data: BytesLike) -> bytes: ...
def ecb_encrypt(cipher_encrypt_func: Any, key: BytesLike, plaintext: BytesLike) -> bytes: ...
def ecb_decrypt(cipher_decrypt_func: Any, key: BytesLike, ciphertext: BytesLike) -> bytes: ...
def ofb_encrypt(cipher_encrypt_func: Any, key: BytesLike, iv: BytesLike, plaintext: BytesLike) -> bytes: ...
def ofb_decrypt(cipher_encrypt_func: Any, key: BytesLike, iv: BytesLike, ciphertext: BytesLike) -> bytes: ...

# Utility functions
def strxor(a: BytesLike, b: BytesLike) -> bytes: ...
def long_to_bytes(n: int, blocksize: int = 0) -> bytes: ...
def bytes_to_long(s: BytesLike) -> int: ...

# Random number generation
def get_random_bytes(n: int) -> bytes: ...

# PKCS1 padding functions
def pkcs1_decode(em: BytesLike, expected_msg_len: int) -> bytes: ... 